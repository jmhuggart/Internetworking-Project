{"version":3,"sources":["serviceWorker.js","App.js","login.js","register.js","create-task.jsx","adminPage.jsx","router.js","index.js"],"names":["Boolean","window","location","hostname","match","App","className","href","LoginForm","props","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","login_data","request","Request","method","headers","body","JSON","stringify","fetch","then","getFieldDecorator","this","style","marginTop","span","offset","background","title","width","onSubmit","Item","rules","required","message","prefix","type","color","placeholder","Password","htmlType","React","Component","Form","create","RegisterForm","register_data","TextArea","Input","answers","0","1","2","3","CreateTask","state","asnum","task_data","onChange","target","value","setState","margin","label","rows","Group","items","i","push","key","InputApp","TabPane","Tabs","Admin","Select","Option","overflow","textAlign","to","animated","tab","AppRouter","exact","path","component","Home","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.1861199d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n           Keeping this default content here to help track how tokens and resources can be established and used.\r\n          <p>My Token = {window.token}</p>*/}\r\n        <p>\r\n        <a className=\"App-link\" href=\"login\">Sign In</a> or <a className=\"App-link\" href=\"register\">Create an Account</a>\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Row, Col, Card, Form, Icon, Input, Button } from 'antd';\r\nimport './login.css';\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                var login_data = values;\r\n\r\n                var request = new Request('/login', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(login_data)\r\n                });\r\n\r\n                fetch(request)\r\n                .then(function() {\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div style={{ marginTop: '10%' }}>\r\n                <Row >\r\n                    <Col span={6} offset={9} style={{ background: 'red', }}>\r\n                        <Card title=\"Login\" style={{ width: \"100%\" }} className='login-card'>\r\n                            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('email', {\r\n                                        rules: [{ required: true, message: 'Please enter your email!' }],\r\n                                    })(\r\n                                        <Input\r\n                                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            placeholder=\"enter your email\"\r\n                                        />,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('password', {\r\n                                        rules: [{ required: true, message: 'Please enter your password!' }],\r\n                                    })(\r\n                                        <Input.Password\r\n                                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"enter your password\" />\r\n                                       ,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n\r\n                                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                        Log in\r\n                                    </Button>\r\n                                    <a href=\"/reg\" className='login-form-reg'>register now!</a>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </Card>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nLoginForm = Form.create()(LoginForm);\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport { Row, Col, Card, Form, Icon, Input, Button } from 'antd';\r\nimport './login.css';\r\n\r\nclass RegisterForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                var register_data = values;\r\n\r\n                var request = new Request('/register', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(register_data)\r\n                });\r\n\r\n                fetch(request)\r\n                .then(function() {\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div style={{ marginTop: '10%' }}>\r\n                <Row >\r\n                    <Col span={6} offset={9} style={{ background: 'red', }}>\r\n                        <Card title=\"Register\" style={{ width: \"100%\" }} className='login-card'>\r\n                            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('email', {\r\n                                        rules: [{ required: true, message: 'Please enter your email!' }],\r\n                                    })(\r\n                                        <label>\r\n                                            Email\r\n                                        <Input\r\n                                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            placeholder=\"enter your email\"\r\n                                        />\r\n                                        </label>,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('pass', {\r\n                                        rules: [{ required: true, message: 'Please enter your password!' }],\r\n                                    })(\r\n                                        <label>\r\n                                            Password\r\n\r\n                                        <Input\r\n                                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n\r\n                                            placeholder=\"enter your password\" />\r\n                                         </label>\r\n                                       ,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('name', {\r\n                                        rules: [{ required: true, message: 'Please enter your username!' }],\r\n                                    })(\r\n                                        <label>\r\n                                            Username\r\n                                        <Input\r\n                                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            placeholder=\"enter your username\"\r\n                                        />\r\n                                        </label>,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n\r\n                                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                        Sign up\r\n                                    </Button>\r\n                                    <a href=\"/\" className='login-form-reg'>login</a>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </Card>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nRegisterForm = Form.create()(RegisterForm);\r\n\r\nexport default RegisterForm;\r\n","import React from 'react';\nimport { Row, Col, Card, Form, Icon, Input, Button, Checkbox, Tabs, Select, Radio } from 'antd';\n\nconst { TextArea } = Input;\n\n\nconst answers = {\n    0: \"A\",\n    1: \"B\",\n    2: \"C\",\n    3: \"D\",\n}\n\n\nclass CreateTask extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    state = {\n        asnum: 0,\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n\n                var task_data = values;\n\n                var request = new Request('/adminPage', {\n                    method: 'POST',\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(task_data)\n                });\n\n                fetch(request)\n                .then(function() {\n                });\n            }\n        });\n    };\n\n    onChange = e => {\n        console.log('radio checked', e.target.value);\n        this.setState({\n            asnum: e.target.value,\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const { asnum } = this.state;\n\n        const InputApp = (asnum) => {\n            var items = [];\n            for (var i = 0; i < asnum; i++) {\n                items.push(\n                    <Form.Item key={i} label={answers[i]}>\n                      {getFieldDecorator(`subject${answers[i]}`, {\n                        rules: [\n                          {\n                            required: true,\n                            message: 'Please enter the answer',\n                          },\n                        ],\n                      })(<Input  placeholder='Please enter the answer'/>)}\n                    </Form.Item>\n                );\n            }\n            console.log(\"items -->\", items);\n            return items\n        }\n\n        return (\n            <div style={{ width:'80%',margin:'3% auto 0' }}>\n                <Form onSubmit={this.handleSubmit} >\n                <Form.Item label=\"subject\">\n                  {getFieldDecorator('subject', {\n                    rules: [\n                      {\n                        required: true,\n                        message: 'Please enter subject',\n                      },\n                    ],\n                  })(<Input  placeholder='Please enter subject'/>)}\n                </Form.Item>\n\n                <Form.Item label=\"question\">\n                  {getFieldDecorator('question', {\n                    rules: [\n                      {\n                        required: true,\n                        message: 'Please enter question',\n                      },\n                    ],\n                  })(<TextArea  rows={4}  placeholder='Please enter question'/>)}\n                </Form.Item>\n\n                <Form.Item label=\"the number of answers\">\n                  {getFieldDecorator('number', {\n                    rules: [\n                      {\n                        required: false,\n                        message: 'select the number',\n                      },\n                    ],\n                  })(\n\n                  <Radio.Group onChange={this.onChange} >\n                     <Radio  value=\"2\"> Two </Radio>\n                     <Radio  value=\"3\"> Three </Radio>\n                     <Radio  value=\"4\"> Four </Radio>\n                   </Radio.Group>\n                  )}\n                </Form.Item>\n\n\n                    {InputApp(asnum)}\n\n\n\n                    <Form.Item>\n\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                            Create a Task\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </div>\n        )\n    }\n}\nCreateTask = Form.create()(CreateTask);\n\nexport default CreateTask\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Row, Col, Card, Form, Icon, Input, Button, Checkbox, Tabs, Select } from 'antd';\nimport CreateTask from './create-task.jsx';\nimport './login.css';\n\n\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\nclass Admin extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n\n                var task_data = values;\n\n                var request = new Request('/adminPage', {\n                    method: 'POST',\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify(task_data)\n                });\n\n                fetch(request)\n                .then(function() {\n                });\n            }\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n\n\n        return (\n            <div style={{ width:'80%',margin:'3% auto 0' }}>\n                <div style={{overflow:'hidden',textAlign:'right'}}>\n                  <Link to='/login'>Sign out</Link>\n                </div>\n                <Tabs animated={true} style={{textAlign: 'center'}}>\n                   <TabPane tab=\"Task List\" key=\"1\" style={{textAlign: 'left'}}>\n                     Content of Tab 1\n                   </TabPane>\n                   <TabPane tab=\"Worker List\" key=\"2\" style={{textAlign: 'left'}}>\n                     Content of Tab 2\n                   </TabPane>\n                   <TabPane tab=\"Create Task\" key=\"3\" style={{textAlign: 'left'}}>\n                     <CreateTask />\n                   </TabPane>\n                 </Tabs>\n            </div>\n        )\n    }\n}\nAdmin = Form.create()(Admin);\n\nexport default Admin;\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport Home from './App.js';\r\nimport LoginForm from './login.js';\r\nimport RegisterForm from './register.js';\r\nimport Admin from './adminPage.jsx'\r\n\r\nexport default class AppRouter extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<BrowserRouter>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\" component={Home}></Route>\r\n\t\t\t\t\t<Route path=\"/login\" component={LoginForm}></Route>\r\n\t\t\t\t\t<Route path=\"/register\" component={RegisterForm}></Route>\r\n\t\t\t\t\t<Route path=\"/adminPage\" component={Admin}></Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</BrowserRouter>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './login.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppRouter from './router.js';\r\n\r\nReactDOM.render(<AppRouter />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}