{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","login.js","router.js","index.js"],"names":["module","exports","App","className","href","Boolean","window","location","hostname","match","LoginForm","props","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","getFieldDecorator","this","style","marginTop","span","offset","background","title","width","onSubmit","Item","rules","required","message","prefix","type","color","placeholder","Password","htmlType","React","Component","Form","create","AppRouter","exact","path","component","Home","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iMAAAA,EAAOC,QAAU,IAA0B,2B,+HCmB5BC,MAff,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAIhB,2BACA,uBAAGA,UAAU,WAAWC,KAAK,SAA7B,WADA,OACoD,uBAAGD,UAAU,WAAWC,KAAK,YAA7B,yBCAxCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wHCdAC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAGVC,aAAe,SAAAC,GACXA,EAAEC,iBACF,EAAKH,MAAMI,KAAKC,gBAAe,SAACC,EAAKC,GAC5BD,GACDE,QAAQC,IAAI,4BAA6BF,OARlC,E,sEAaT,IACEG,EAAsBC,KAAKX,MAAMI,KAAjCM,kBACR,OACI,yBAAKE,MAAO,CAAEC,UAAW,QACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKC,KAAM,EAAGC,OAAQ,EAAGH,MAAO,CAAEI,WAAY,QAC1C,kBAAC,IAAD,CAAMC,MAAM,QAAQL,MAAO,CAAEM,MAAO,QAAU1B,UAAU,cACpD,kBAAC,IAAD,CAAM2B,SAAUR,KAAKV,aAAcT,UAAU,cACzC,kBAAC,IAAK4B,KAAN,KACKV,EAAkB,QAAS,CACxBW,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,8BADtCb,CAGG,kBAAC,IAAD,CACIc,OAAQ,kBAAC,IAAD,CAAMC,KAAK,OAAOb,MAAO,CAAEc,MAAO,qBAC1CC,YAAY,uBAIxB,kBAAC,IAAKP,KAAN,KACKV,EAAkB,OAAQ,CACvBW,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADtCb,CAGG,kBAAC,IAAMkB,SAAP,CACIJ,OAAQ,kBAAC,IAAD,CAAMC,KAAK,OAAOb,MAAO,CAAEc,MAAO,qBAC1CD,KAAK,WACLE,YAAY,0BAIxB,kBAAC,IAAKP,KAAN,KAEI,kBAAC,IAAD,CAAQK,KAAK,UAAUI,SAAS,SAASrC,UAAU,qBAAnD,UAGA,uBAAGC,KAAK,OAAOD,UAAU,kBAAzB,2B,GAhDZsC,IAAMC,WA6DfhC,EAFfA,EAAYiC,IAAKC,QAALD,CAAcjC,GCxDLmC,E,YACpB,WAAYlC,GAAQ,qEACbA,I,sEAGN,OACC,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,SAASC,UAAWtC,U,GATE+B,IAAMC,WCC7CQ,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,SHyHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"js/main.0c44bd00.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />\n           Keeping this default content here to help track how tokens and resources can be established and used.\n          <p>My Token = {window.token}</p>*/}\n        <p>\n        <a className=\"App-link\" href=\"login\">Sign In</a> or <a className=\"App-link\" href=\"register\">Create an Account</a>\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { Row, Col, Card, Form, Icon, Input, Button, Checkbox } from 'antd';\r\nimport './login.css';\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div style={{ marginTop: '10%' }}>\r\n                <Row >\r\n                    <Col span={6} offset={9} style={{ background: 'red', }}>\r\n                        <Card title=\"Login\" style={{ width: \"100%\" }} className='login-card'>\r\n                            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('email', {\r\n                                        rules: [{ required: true, message: 'Please enter your email!' }],\r\n                                    })(\r\n                                        <Input\r\n                                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            placeholder=\"enter your email\"\r\n                                        />,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('pass', {\r\n                                        rules: [{ required: true, message: 'Please enter your password!' }],\r\n                                    })(\r\n                                        <Input.Password\r\n                                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"enter your password\" />\r\n                                       ,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                   \r\n                                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                        Log in\r\n                                    </Button>\r\n                                    <a href=\"/reg\" className='login-form-reg'>register now!</a>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </Card>\r\n\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nLoginForm = Form.create()(LoginForm);\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport Home from './App.js';\r\nimport LoginForm from './login.js';\r\n//import Register from './register.js';\r\n\r\nexport default class AppRouter extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<BrowserRouter>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\" component={Home}></Route>\r\n\t\t\t\t\t<Route path=\"/login\" component={LoginForm}></Route>\r\n\t\t\t\t\t\r\n\t\t\t\t</Switch>\r\n\t\t\t</BrowserRouter>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './login.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport AppRouter from './router.js';\n\nReactDOM.render(<AppRouter />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}