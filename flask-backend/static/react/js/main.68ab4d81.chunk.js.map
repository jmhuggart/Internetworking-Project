{"version":3,"sources":["serviceWorker.js","App.js","login.js","register.js","create-task.js","adminPage.js","QuestionListPage.js","router.js","index.js"],"names":["Boolean","window","location","hostname","match","App","className","href","LoginForm","props","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","login_data","that","request","Request","method","headers","body","JSON","stringify","fetch","then","response","ok","Error","statusText","setState","isComplete","isInvalid","catch","error","state","getFieldDecorator","this","userObject","parse","replace","to","style","marginTop","span","offset","background","title","width","onSubmit","Item","rules","required","message","prefix","type","color","placeholder","Password","htmlType","description","name","React","Component","Form","create","RegisterForm","register_data","TextArea","Input","answers","0","1","2","3","CreateTask","asnum","task_data","onChange","target","value","margin","label","rows","Group","items","i","push","key","InputApp","TabPane","Tabs","Admin","Select","Option","tabs","animated","textAlign","tab","overflow","questionsObject","data","ListPage","list_data","size","bordered","dataSource","renderItem","item","Meta","AppRouter","exact","path","component","Home","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.68ab4d81.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n           Keeping this default content here to help track how tokens and resources can be established and used.\r\n          <p>My Token = {window.token}</p>*/}\r\n        <p>\r\n        <a className=\"App-link\" href=\"login\">Sign In</a> or <a className=\"App-link\" href=\"register\">Create an Account</a>\r\n        </p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { Alert, Row, Col, Card, Form, Icon, Input, Button } from 'antd';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './login.css';\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isComplete: false,\r\n            isInvalid: false\r\n        };\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                var login_data = values;\r\n                const that = this;\r\n\r\n                var request = new Request('/login', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(login_data)\r\n                });\r\n\r\n                fetch(request)\r\n                .then(function(response) {\r\n                    if (!response.ok) {\r\n                        throw Error(response.statusText);\r\n                    }\r\n                    return response;\r\n                }).then(function(response) {\r\n                    console.log('ok');\r\n                    that.setState({\r\n                        isComplete: true,\r\n                        isInvalid: false\r\n                    });\r\n                }).catch(function(error) {\r\n                    that.setState({\r\n                        isComplete: false,\r\n                        isInvalid: true\r\n                    });\r\n                    console.log(error);\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        var userObject = JSON.parse(window[\"user\"].replace(/&#34;/g,'\"'));\r\n        const isInvalid = this.state.isInvalid;\r\n        if (this.state.isComplete) {\r\n            return <Redirect to='/' />\r\n        }\r\n        return (\r\n            <div style={{ marginTop: '10%' }}>\r\n                <Row >\r\n                    <Col span={6} offset={9} style={{ background: 'red', }}>\r\n                        <Card title=\"Login\" style={{ width: \"100%\" }} className='login-card'>\r\n                            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('email', {\r\n                                        rules: [{ required: true, message: 'Please enter your email!' }],\r\n                                    })(\r\n                                        <Input\r\n                                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            placeholder=\"enter your email\"\r\n                                        />,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('pass', {\r\n                                        rules: [{ required: true, message: 'Please enter your password!' }],\r\n                                    })(\r\n                                        <Input.Password\r\n                                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"enter your password\" />\r\n                                       ,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n\r\n                                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                        Log in\r\n                                    </Button>\r\n                                    <a href=\"/reg\" className='login-form-reg'>register now!</a>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </Card>\r\n                        {isInvalid ? (\r\n                            <Alert\r\n                            message=\"Invalid credentials\"\r\n                            description=\"Your username or password is incorrect.\"\r\n                            type=\"error\"\r\n                            />\r\n                        ) : null }\r\n                        <p>My name is {userObject.name}</p>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nLoginForm = Form.create()(LoginForm);\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport { Alert, Row, Col, Card, Form, Icon, Input, Button } from 'antd';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './login.css';\r\n\r\nclass RegisterForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isComplete: false,\r\n            isInvalid: false\r\n        };\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                var register_data = values;\r\n                const that = this;\r\n\r\n                var request = new Request('/register', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(register_data)\r\n                });\r\n\r\n                fetch(request)\r\n                .then(function(response) {\r\n                    if (!response.ok) {\r\n                        throw Error(response.statusText);\r\n                    }\r\n                    return response;\r\n                }).then(function(response) {\r\n                    console.log('ok');\r\n                    that.setState({\r\n                        isComplete: true,\r\n                        isInvalid: false\r\n                    });\r\n                }).catch(function(error) {\r\n                    that.setState({\r\n                        isComplete: false,\r\n                        isInvalid: true\r\n                    });\r\n                    console.log(error);\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const isInvalid = this.state.isInvalid;\r\n        if (this.state.isComplete) {\r\n            return <Redirect to='/' />\r\n        }\r\n        return (\r\n            <div style={{ marginTop: '10%' }}>\r\n                <Row >\r\n                    <Col span={6} offset={9} style={{ background: 'red', }}>\r\n                        <Card title=\"Register\" style={{ width: \"100%\" }} className='login-card'>\r\n                            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('email', {\r\n                                        rules: [{ required: true, message: 'Please enter your email!' }],\r\n                                    })(\r\n                                        <label>\r\n                                            Email\r\n                                        <Input\r\n                                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            placeholder=\"enter your email\"\r\n                                        />\r\n                                        </label>,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('pass', {\r\n                                        rules: [{ required: true, message: 'Please enter your password!' }],\r\n                                    })(\r\n                                        <label>\r\n                                            Password\r\n\r\n                                        <Input\r\n                                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n\r\n                                            placeholder=\"enter your password\" />\r\n                                         </label>\r\n                                       ,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('name', {\r\n                                        rules: [{ required: true, message: 'Please enter your username!' }],\r\n                                    })(\r\n                                        <label>\r\n                                            Username\r\n                                        <Input\r\n                                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            placeholder=\"enter your username\"\r\n                                        />\r\n                                        </label>,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n\r\n                                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                        Sign up\r\n                                    </Button>\r\n                                    <a href=\"/\" className='login-form-reg'>login</a>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </Card>\r\n                        {isInvalid ? (\r\n                            <Alert\r\n                            message=\"Invalid email\"\r\n                            description=\"Please enter in a complete email address.\"\r\n                            type=\"error\"\r\n                            />\r\n                        ) : null }\r\n\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nRegisterForm = Form.create()(RegisterForm);\r\n\r\nexport default RegisterForm;\r\n","import React from 'react';\r\nimport { Row, Col, Card, Form, Icon, Input, Button, Checkbox, Tabs, Select, Radio } from 'antd';\r\n\r\nconst { TextArea } = Input;\r\n\r\n\r\nconst answers = {\r\n    0: \"A\",\r\n    1: \"B\",\r\n    2: \"C\",\r\n    3: \"D\",\r\n}\r\n\r\n\r\nclass CreateTask extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    state = {\r\n        asnum: 0,\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                var task_data = values;\r\n\r\n                var request = new Request('/adminPage', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(task_data)\r\n                });\r\n\r\n                fetch(request)\r\n                .then(function() {\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    onChange = e => {\r\n        console.log('radio checked', e.target.value);\r\n        this.setState({\r\n            asnum: e.target.value,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const { asnum } = this.state;\r\n\r\n        const InputApp = (asnum) => {\r\n            var items = [];\r\n            for (var i = 0; i < asnum; i++) {\r\n                items.push(\r\n                    <Form.Item key={i} label={answers[i]}>\r\n                      {getFieldDecorator(`subject${answers[i]}`, {\r\n                        rules: [\r\n                          {\r\n                            required: true,\r\n                            message: 'Please enter the answer',\r\n                          },\r\n                        ],\r\n                      })(<Input  placeholder='Please enter the answer'/>)}\r\n                    </Form.Item>\r\n                );\r\n            }\r\n            console.log(\"items -->\", items);\r\n            return items\r\n        }\r\n\r\n        return (\r\n            <div style={{ width:'80%',margin:'3% auto 0' }}>\r\n                <Form onSubmit={this.handleSubmit} >\r\n                <Form.Item label=\"subject\">\r\n                  {getFieldDecorator('subject', {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: 'Please enter subject',\r\n                      },\r\n                    ],\r\n                  })(<Input  placeholder='Please enter subject'/>)}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"question\">\r\n                  {getFieldDecorator('question', {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: 'Please enter question',\r\n                      },\r\n                    ],\r\n                  })(<TextArea  rows={4}  placeholder='Please enter question'/>)}\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"the number of answers\">\r\n                  {getFieldDecorator('number', {\r\n                    rules: [\r\n                      {\r\n                        required: false,\r\n                        message: 'select the number',\r\n                      },\r\n                    ],\r\n                  })(\r\n\r\n                  <Radio.Group onChange={this.onChange} >\r\n                     <Radio  value=\"2\"> Two </Radio>\r\n                     <Radio  value=\"3\"> Three </Radio>\r\n                     <Radio  value=\"4\"> Four </Radio>\r\n                   </Radio.Group>\r\n                  )}\r\n                </Form.Item>\r\n\r\n\r\n                    {InputApp(asnum)}\r\n\r\n\r\n\r\n                    <Form.Item>\r\n\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                            Create a Task\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nCreateTask = Form.create()(CreateTask);\r\n\r\nexport default CreateTask\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Row, Col, Card, Form, Icon, Input, Button, Checkbox, Tabs, Select } from 'antd';\r\nimport CreateTask from './create-task.js';\r\nimport './login.css';\r\n\r\nfunction checkAdmin(userType) {\r\n    if (userType === \"Admin\") {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\n\r\nclass Admin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                var task_data = values;\r\n\r\n                var request = new Request('/adminPage', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(task_data)\r\n                });\r\n\r\n                fetch(request)\r\n                .then(function() {\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        var userObject = JSON.parse(window[\"user\"].replace(/&#34;/g,'\"'));\r\n        var isAdmin = checkAdmin(userObject.type);\r\n        var tabs;\r\n\r\n        if (isAdmin) {\r\n            tabs = [\r\n                <Tabs animated={true} style={{textAlign: 'center'}}>\r\n                   <TabPane tab=\"Task List\" key=\"1\" style={{textAlign: 'left'}}>\r\n                     Content of Tab 1\r\n                   </TabPane>\r\n                    <TabPane tab=\"Worker List\" key=\"2\" style={{textAlign: 'left'}}>\r\n                        Content of Tab 2\r\n                    </TabPane>\r\n                    <TabPane tab=\"Create Task\" key=\"3\" style={{textAlign: 'left'}}>\r\n                        <CreateTask />\r\n                    </TabPane>\r\n                 </Tabs>\r\n            ];\r\n        } else {\r\n            tabs = [\r\n                <Tabs animated={true} style={{textAlign: 'center'}}>\r\n                   <TabPane tab=\"Task List\" key=\"1\" style={{textAlign: 'left'}}>\r\n                     Content of Tab 1\r\n                   </TabPane>\r\n                 </Tabs>\r\n            ];\r\n        }\r\n\r\n        return (\r\n            <div style={{ width:'80%',margin:'3% auto 0' }}>\r\n                <div style={{overflow:'hidden', textAlign:'right'}}>\r\n                  <Link to='/login'>Sign out</Link>\r\n                </div>\r\n                {tabs}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nAdmin = Form.create()(Admin);\r\n\r\nexport default Admin;\r\n","import React from 'react';\r\nimport { List } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport './QuestionListPage.css'\r\n\r\nvar questionsObject = (window[\"data\"].replace(/&#34;/g,'\"'));\r\n\r\nvar data = [];\r\n\r\nfor (var i in questionsObject)\r\n    data.push([i, questionsObject [i]]);\r\n\r\nclass ListPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                var list_data = values;\r\n                const that = this;\r\n\r\n                var request = new Request('/questionList', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(list_data)\r\n                });\r\n              }\r\n          });\r\n      };\r\n\r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n            <div style={{ width:'80%',margin:'3% auto 0' }}>\r\n\r\n                <div style={{overflow:'hidden',textAlign:'right'}}>\r\n                  <Link to='/home'>Sign out</Link>\r\n                </div>\r\n                <div>\r\n                  <h1>LIST OF TASKS</h1>\r\n\r\n                  <List\r\n                    size=\"small\"\r\n                    bordered\r\n                    style={{textAlign:'center'}}\r\n                    dataSource={data}\r\n                    renderItem={item =>\r\n                      <List.Item className=\"list-wap\">\r\n                       <Link to=\"/questionDetails\">\r\n\r\n                        <List.Item.Meta\r\n                          title={item}\r\n                          description= \"Subject:[subjectName]&nbsp;&nbsp;&nbsp;&nbsp; CreationDate:[date]\"\r\n                        />\r\n                      </Link>\r\n                      </List.Item>\r\n\r\n                    }\r\n                  />\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListPage;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport Home from './App.js';\r\nimport LoginForm from './login.js';\r\nimport RegisterForm from './register.js';\r\nimport Admin from './adminPage.js'\r\nimport ListPage from './QuestionListPage.js'\r\n\r\nexport default class AppRouter extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<BrowserRouter>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\" component={Home}></Route>\r\n\t\t\t\t\t<Route path=\"/login\" component={LoginForm}></Route>\r\n\t\t\t\t\t<Route path=\"/register\" component={RegisterForm}></Route>\r\n\t\t\t\t\t<Route path=\"/adminPage\" component={Admin}></Route>\r\n\t\t\t\t\t<Route path=\"/questionList\" component={ListPage}></Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</BrowserRouter>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './login.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppRouter from './router.js';\r\n\r\nReactDOM.render(<AppRouter/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}