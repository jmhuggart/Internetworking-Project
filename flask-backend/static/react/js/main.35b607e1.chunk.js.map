{"version":3,"sources":["serviceWorker.js","QuestionListPage.js","App.js","login.js","register.js","create-task.js","QuestionDetails.js","adminPage.js","router.js","index.js"],"names":["Boolean","window","location","hostname","match","HomePageApp","props","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","handleSignOut","request","Request","method","that","fetch","then","response","ok","Error","statusText","setState","signedOut","catch","error","state","isLoggedIn","userObject","JSON","parse","replace","name","style","width","margin","overflow","textAlign","href","onClick","this","to","React","Component","HomePage","Form","create","withRouter","LoginForm","login_data","headers","body","stringify","isComplete","isInvalid","getFieldDecorator","marginTop","span","offset","background","title","className","onSubmit","Item","rules","required","message","prefix","type","color","placeholder","Password","htmlType","description","RegisterForm","register_data","TextArea","Input","answers","0","1","2","3","CreateTask","task_data","didSubmit","onChange","target","value","asnum","label","rows","Group","items","i","push","key","InputApp","data","tasksObject","numTasks","ListPage","size","bordered","dataSource","renderItem","item","pathname","passData","taskData","Meta","subject","postDT","taskObject","question","correctAnswer","votes","TabPane","Tabs","Admin","tabs","isAdmin","animated","tab","Paragraph","Typography","viewTaskApp","voteData","undefined","canConductMAJ","answer","answerA","answerB","A","B","answerC","C","answerD","D","highestVoteHolder","correctAnswerHolder","keepString","length","parseInt","localeCompare","simpleMajorityAggregation","radioStyle","display","height","lineHeight","Grid","map","AppRouter","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.35b607e1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport { List } from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport './QuestionListPage.css'\r\n\r\nconst data = [];\r\n\r\nvar tasksObject = JSON.parse(window[\"tasks\"].replace(/u&#39;/g,'\"').replace(/&#34;/g,'\"'));\r\n\r\nfor (var i = 0; i < tasksObject.numTasks; i++) {\r\n  data.push(tasksObject[\"task\" + i]);\r\n}\r\n\r\nclass ListPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ width:'80%',margin:'3% auto 0' }}>\r\n                <div>\r\n                  <h1>LIST OF TASKS</h1>\r\n                  <List\r\n                    size=\"small\"\r\n                    bordered\r\n                    style={{textAlign:'center'}}\r\n                    dataSource={data}\r\n                    renderItem={item =>\r\n                      <List.Item className=\"list-wap\">\r\n                       <Link to={{\r\n                          pathname: \"/questionDetails\",\r\n                          passData: { taskData: item }\r\n                       }}>\r\n                        <List.Item.Meta\r\n                          title={item.subject}\r\n                          description= {\"Posted on: \" + item.postDT}\r\n                        />\r\n                      </Link>\r\n                      </List.Item>\r\n                    }\r\n                  />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ListPage;\r\n","import React from 'react';\nimport { Form } from 'antd';\nimport { withRouter, Link } from 'react-router-dom';\n\nclass HomePageApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            signedOut: false\n        };\n    }\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n            }\n        });\n    };\n\n    handleSignOut = e => {\n        var request = new Request('/signOut', {\n            method: 'GET',\n        });\n\n        const that = this;\n\n        fetch(request)\n        .then(function(response) {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            return response;\n        }).then(function(response) {\n            console.log('ok');\n            that.setState({\n                signedOut: true\n            });\n        }).catch(function(error) {\n            that.setState({\n                signedOut: false\n            });\n            console.log(error);\n        });\n    };\n\n    render() {\n        var isLoggedIn = false;\n        var userObject = JSON.parse(window[\"user\"].replace(/&#34;/g,'\"'));\n            if (userObject.name !== \"nil\") {\n                isLoggedIn = true;\n            }\n        return (\n            <div style={{ width:'80%',margin:'3% auto 0' }}>\n                <div style={{overflow:'hidden',textAlign:'right'}}>\n                {isLoggedIn ? (\n                  <a href='/' onClick = {this.handleSignOut}>Sign Out</a>\n                ) : (\n                <>\n                  <Link to='/login'>Sign in</Link>\n                  <span>&nbsp; &nbsp; &nbsp;</span>\n                  <Link to='/register'>Create an account</Link>\n                </>\n                ) }\n                </div>\n                <div>\n                  <h1>HomePage</h1>\n                  {isLoggedIn ? (\n                      <p style={{textAlign:'center'}}>{\"Welcome, \" + userObject.name + \".\"}</p>\n                  ) : null }\n                  <p style={{textAlign:'center'}}>Answer simple questions to help us get the most correct answer.</p>\n                  {isLoggedIn ? (\n                      <p style={{textAlign:'center'}}>Click <a href=\"/adminPage\">here</a> to get started.</p>\n                  ) : (\n                      <p style={{textAlign:'center'}}>You must be logged in to get started.</p>\n                  )}\n                  <div>\n                    <p>Project Team : </p>\n                    <p>Jack Huggart - 12604512</p>\n                    <p>William Roson - 11041249</p>\n                    <p>Colin Luu - 99131753</p>\n                    <p>Sebastian Aroney - 12606481</p>\n                    <p>Xiaohan Wang - 12806295</p>\n                    <p>Ty Yarwood - 12552434</p>\n                    <p>Supervisor - Xianzhi Wang</p>\n                  </div>\n                </div>\n            </div>\n        )\n    }\n}\nconst HomePage = Form.create()(HomePageApp);\n\nexport default withRouter(HomePage)","import React from 'react';\r\nimport { Alert, Row, Col, Card, Form, Icon, Input, Button } from 'antd';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './login.css';\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isComplete: false,\r\n            isInvalid: false\r\n        };\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                var login_data = values;\r\n                const that = this;\r\n\r\n                var request = new Request('/login', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(login_data)\r\n                });\r\n\r\n                fetch(request)\r\n                .then(function(response) {\r\n                    if (!response.ok) {\r\n                        throw Error(response.statusText);\r\n                    }\r\n                    return response;\r\n                }).then(function(response) {\r\n                    console.log('ok');\r\n                    that.setState({\r\n                        isComplete: true,\r\n                        isInvalid: false\r\n                    });\r\n                }).catch(function(error) {\r\n                    that.setState({\r\n                        isComplete: false,\r\n                        isInvalid: true\r\n                    });\r\n                    console.log(error);\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const isInvalid = this.state.isInvalid;\r\n        if (this.state.isComplete) {\r\n            return <Redirect to='/' />\r\n        }\r\n        return (\r\n            <div style={{ marginTop: '10%' }}>\r\n                <Row >\r\n                    <Col span={6} offset={9} style={{ background: 'red', }}>\r\n                        <Card title=\"Login\" style={{ width: \"100%\" }} className='login-card'>\r\n                            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('email', {\r\n                                        rules: [{ required: true, message: 'Please enter your email!' }],\r\n                                    })(\r\n                                        <Input\r\n                                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            placeholder=\"enter your email\"\r\n                                        />,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('pass', {\r\n                                        rules: [{ required: true, message: 'Please enter your password!' }],\r\n                                    })(\r\n                                        <Input.Password\r\n                                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            type=\"password\"\r\n                                            placeholder=\"enter your password\" />\r\n                                       ,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n\r\n                                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                        Log in\r\n                                    </Button>\r\n                                    <a href=\"/register\" className='login-form-reg'>register now!</a>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </Card>\r\n                        {isInvalid ? (\r\n                            <Alert\r\n                            message=\"Invalid credentials\"\r\n                            description=\"Your username or password is incorrect.\"\r\n                            type=\"error\"\r\n                            />\r\n                        ) : null }\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nLoginForm = Form.create()(LoginForm);\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport { Alert, Row, Col, Card, Form, Icon, Input, Button } from 'antd';\r\nimport { Redirect } from 'react-router-dom';\r\nimport './login.css';\r\n\r\nclass RegisterForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isComplete: false,\r\n            isInvalid: false\r\n        };\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                var register_data = values;\r\n                const that = this;\r\n\r\n                var request = new Request('/register', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(register_data)\r\n                });\r\n\r\n                fetch(request)\r\n                .then(function(response) {\r\n                    if (!response.ok) {\r\n                        throw Error(response.statusText);\r\n                    }\r\n                    return response;\r\n                }).then(function(response) {\r\n                    console.log('ok');\r\n                    that.setState({\r\n                        isComplete: true,\r\n                        isInvalid: false\r\n                    });\r\n                }).catch(function(error) {\r\n                    that.setState({\r\n                        isComplete: false,\r\n                        isInvalid: true\r\n                    });\r\n                    console.log(error);\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const isInvalid = this.state.isInvalid;\r\n        if (this.state.isComplete) {\r\n            return <Redirect to='/' />\r\n        }\r\n        return (\r\n            <div style={{ marginTop: '10%' }}>\r\n                <Row >\r\n                    <Col span={6} offset={9} style={{ background: 'red', }}>\r\n                        <Card title=\"Register\" style={{ width: \"100%\" }} className='login-card'>\r\n                            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('email', {\r\n                                        rules: [{ required: true, message: 'Please enter your email!' }],\r\n                                    })(\r\n                                        <label>\r\n                                            Email\r\n                                        <Input\r\n                                            prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            placeholder=\"enter your email\"\r\n                                        />\r\n                                        </label>,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('pass', {\r\n                                        rules: [{ required: true, message: 'Please enter your password!' }],\r\n                                    })(\r\n                                        <label>\r\n                                            Password\r\n\r\n                                        <Input\r\n                                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n\r\n                                            placeholder=\"enter your password\" />\r\n                                         </label>\r\n                                       ,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n                                    {getFieldDecorator('name', {\r\n                                        rules: [{ required: true, message: 'Please enter your username!' }],\r\n                                    })(\r\n                                        <label>\r\n                                            Username\r\n                                        <Input\r\n                                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                                            placeholder=\"enter your username\"\r\n                                        />\r\n                                        </label>,\r\n                                    )}\r\n                                </Form.Item>\r\n                                <Form.Item>\r\n\r\n                                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                                        Sign up\r\n                                    </Button>\r\n                                    <a href=\"/\" className='login-form-reg'>login</a>\r\n                                </Form.Item>\r\n                            </Form>\r\n                        </Card>\r\n                        {isInvalid ? (\r\n                            <Alert\r\n                            message=\"Invalid email\"\r\n                            description=\"Please enter in a complete email address.\"\r\n                            type=\"error\"\r\n                            />\r\n                        ) : null }\r\n\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nRegisterForm = Form.create()(RegisterForm);\r\n\r\nexport default RegisterForm;\r\n","import React from 'react';\r\nimport { Form, Input, Button, Radio } from 'antd';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst { TextArea } = Input;\r\n\r\n\r\nconst answers = {\r\n    0: \"A\",\r\n    1: \"B\",\r\n    2: \"C\",\r\n    3: \"D\",\r\n}\r\n\r\n\r\nclass CreateTask extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            asnum: 0,\r\n            didSubmit: false\r\n        };\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                var task_data = values;\r\n\r\n                var request = new Request('/adminPage', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(task_data)\r\n                });\r\n\r\n                const that = this;\r\n\r\n                fetch(request)\r\n                .then(function(response) {\r\n                    if (!response.ok) {\r\n                        throw Error(response.statusText);\r\n                    }\r\n                    return response;\r\n                }).then(function(response) {\r\n                    console.log('ok');\r\n                    that.setState({\r\n                        didSubmit: true\r\n                    });\r\n                }).catch(function(error) {\r\n                    that.setState({\r\n                        didSubmit: false\r\n                    });\r\n                    console.log(error);\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    onChange = e => {\r\n        console.log('radio checked', e.target.value);\r\n        this.setState({\r\n            asnum: e.target.value,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        if (this.state.didSubmit) {\r\n            return <Redirect to='/adminPage' />\r\n        }\r\n\r\n        const { getFieldDecorator } = this.props.form;\r\n        const { asnum } = this.state;\r\n\r\n        const InputApp = (asnum) => {\r\n            var items = [];\r\n            for (var i = 0; i < asnum; i++) {\r\n                items.push(\r\n                    <Form.Item key={i} label={answers[i]}>\r\n                      {getFieldDecorator(`subject${answers[i]}`, {\r\n                        rules: [\r\n                          {\r\n                            required: true,\r\n                            message: 'Please enter the answer',\r\n                          },\r\n                        ],\r\n                      })(<Input  placeholder='Please enter the answer'/>)}\r\n                    </Form.Item>\r\n                );\r\n            }\r\n            console.log(\"items -->\", items);\r\n            return items\r\n        }\r\n        return (\r\n            <div style={{ width:'80%',margin:'3% auto 0' }}>\r\n                <Form onSubmit={this.handleSubmit} >\r\n                <Form.Item label=\"subject\">\r\n                  {getFieldDecorator('subject', {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: 'Please enter subject',\r\n                      },\r\n                    ],\r\n                  })(<Input  placeholder='Please enter subject'/>)}\r\n                </Form.Item>\r\n                <Form.Item label=\"question\">\r\n                  {getFieldDecorator('question', {\r\n                    rules: [\r\n                      {\r\n                        required: true,\r\n                        message: 'Please enter question',\r\n                      },\r\n                    ],\r\n                  })(<TextArea  rows={4}  placeholder='Please enter question'/>)}\r\n                </Form.Item>\r\n                <Form.Item label=\"the number of answers\">\r\n                  {getFieldDecorator('number', {\r\n                    rules: [\r\n                      {\r\n                        required: false,\r\n                        message: 'select the number',\r\n                      },\r\n                    ],\r\n                  })(\r\n                  <Radio.Group onChange={this.onChange} >\r\n                     <Radio  value=\"2\"> Two </Radio>\r\n                     <Radio  value=\"3\"> Three </Radio>\r\n                     <Radio  value=\"4\"> Four </Radio>\r\n                   </Radio.Group>\r\n                  )}\r\n                </Form.Item>\r\n                    {InputApp(asnum)}\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                            Create a Task\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nCreateTask = Form.create()(CreateTask);\r\n\r\nexport default CreateTask\r\n","import React from 'react';\r\nimport {Radio, Form, Button, Card, Typography } from 'antd';\r\nimport { withRouter, Link, Redirect } from 'react-router-dom';\r\nconst { Paragraph } = Typography;\r\n\r\nvar taskObject;\r\nvar postDT;\r\nvar subject;\r\nvar question;\r\nvar correctAnswer;\r\nvar votes;\r\nvar answers;\r\n\r\nfunction simpleMajorityAggregation(votes, answers) {\r\n    var highestVoteHolder = 0;\r\n    var correctAnswerHolder = [];\r\n    var keepString = \"\";\r\n  \r\n    for (var i = 0; i < votes.length; i++) {\r\n        if (parseInt(votes[i].votes, 10) > highestVoteHolder) {\r\n            highestVoteHolder = parseInt(votes[i].votes, 10);\r\n            correctAnswerHolder = [{key: votes[i].key, votes: highestVoteHolder}];\r\n            keepString = answers[i].answer;\r\n        } else if ( (parseInt(votes[i].votes, 10) === highestVoteHolder) && ( (answers[i].answer.localeCompare(keepString)) > 0) ) {\r\n            highestVoteHolder = parseInt(votes[i].votes, 10);\r\n            correctAnswerHolder = [{key: votes[i].key, votes: highestVoteHolder}];\r\n            keepString = answers[i].answer;\r\n        }\r\n    }\r\n    return correctAnswerHolder;\r\n}\r\n\r\nclass viewTaskApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          value: \"\",\r\n          signedOut: false\r\n        };\r\n    }\r\n\r\n    onChange = e => {\r\n      console.log(\"radio checked\", e.target.value);\r\n      this.setState({\r\n        value: e.target.value\r\n      });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n      var voteData = {};\r\n      voteData[\"selectedAnswer\"] = this.state.value;\r\n      if (this.props.location.passData !== undefined) {\r\n        voteData[\"question\"] = this.props.location.passData.taskData.question;\r\n      } else {\r\n        taskObject = JSON.parse(window[\"task\"].replace(/u&#39;/g,'\"').replace(/&#34;/g,'\"'));\r\n        voteData[\"question\"] = taskObject.question;\r\n      }\r\n      \r\n      var request = new Request('/questionDetails', {\r\n        method: 'POST',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(voteData)\r\n      });\r\n\r\n      fetch(request)\r\n      .then(function(response) {\r\n          if (!response.ok) {\r\n              throw Error(response.statusText);\r\n          }\r\n          return response;\r\n      }).then(function(response) {\r\n          console.log('ok');\r\n      }).catch(function(error) {\r\n          console.log(error);\r\n      });\r\n    };\r\n\r\n    handleSignOut = e => {\r\n        var request = new Request('/signOut', {\r\n            method: 'GET',\r\n        });\r\n\r\n        const that = this;\r\n\r\n        fetch(request)\r\n        .then(function(response) {\r\n            if (!response.ok) {\r\n                throw Error(response.statusText);\r\n            }\r\n            return response;\r\n        }).then(function(response) {\r\n            console.log('ok');\r\n            that.setState({\r\n                signedOut: true\r\n            });\r\n        }).catch(function(error) {\r\n            that.setState({\r\n                signedOut: false\r\n            });\r\n            console.log(error);\r\n        });\r\n    };\r\n\r\n    render() {\r\n      if (this.state.signedOut) {\r\n          return <Redirect to='/' />\r\n      }\r\n\r\n      if (this.props.location.passData !== undefined) {\r\n          postDT = this.props.location.passData.taskData.postDT;\r\n          subject = this.props.location.passData.taskData.subject;\r\n          question = this.props.location.passData.taskData.question;\r\n\r\n          answers = [\r\n            {key: \"A\", answer: this.props.location.passData.taskData.answerA},\r\n            {key: \"B\", answer: this.props.location.passData.taskData.answerB},\r\n          ];\r\n\r\n          votes = [\r\n            {key: \"A\", votes: this.props.location.passData.taskData.A},\r\n            {key: \"B\", votes: this.props.location.passData.taskData.B}\r\n          ];\r\n\r\n          if (this.props.location.passData.taskData.answerC !== \"empty\") {\r\n              answers.push({key: \"C\", answer: this.props.location.passData.taskData.answerC});\r\n              votes.push({key: \"C\", votes: this.props.location.passData.taskData.C});\r\n\r\n            if (this.props.location.passData.taskData.answerD !== \"empty\") {\r\n                answers.push({key: \"D\", answer: this.props.location.passData.taskData.answerD});\r\n                votes.push({key: \"D\", votes: this.props.location.passData.taskData.D})\r\n            }\r\n          }\r\n      } else {\r\n          taskObject = JSON.parse(window[\"task\"].replace(/u&#39;/g,'\"').replace(/&#34;/g,'\"'));\r\n          postDT = taskObject.postDT;\r\n          subject = taskObject.subject;\r\n          question = taskObject.question;\r\n\r\n          answers = [\r\n            {key: \"A\", answer: taskObject.answerA},\r\n            {key: \"B\", answer: taskObject.answerB}\r\n          ];\r\n\r\n          votes = [\r\n            {key: \"A\", votes: taskObject.A},\r\n            {key: \"B\", votes: taskObject.B},\r\n          ];\r\n\r\n          if (taskObject.answerC !== \"empty\") {\r\n              answers.push({key: \"C\", answer: taskObject.answerC});\r\n              votes.push({key: \"C\", votes: taskObject.C});\r\n\r\n              if (taskObject.answerD !== \"empty\") {\r\n                answers.push({key: \"D\", answer: taskObject.answerD});\r\n                votes.push({key: \"D\", votes: taskObject.D});\r\n              }\r\n          }\r\n      }\r\n      correctAnswer = simpleMajorityAggregation(votes, answers);\r\n      var canConductMAJ;\r\n      if (correctAnswer[0].votes !== 0) {\r\n          canConductMAJ = true;\r\n      } else {\r\n          canConductMAJ = false;\r\n      }\r\n\r\n      \r\n\r\n      const radioStyle = {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '30px',\r\n      };\r\n        const { getFieldDecorator } = this.props.form;\r\n\r\n        return (\r\n            <div style={{ width:'80%',margin:'3% auto 0' }}>\r\n                <div style={{overflow:'hidden',}}>\r\n                  <span>\r\n                    <Link to='/adminPage'>Back to Task list</Link>\r\n                  </span>\r\n                  <span style={{'float':'right'}}>\r\n                    <a href='/' onClick = {this.handleSignOut}>Sign out</a>\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <h1>{\"Subject: \" + subject}</h1>\r\n                  <div>\r\n                    <Card>\r\n                    <Card.Grid>                     \r\n                       {\"Posted on: \" + postDT}\r\n                     </Card.Grid>\r\n                     <Card.Grid>\r\n                       {\"Question: \" + question}\r\n                     </Card.Grid>\r\n                     </Card>\r\n                  </div>\r\n                  <div>\r\n                    {answers.map(item =>\r\n                 <Card  title={`${item.key}. ${item.answer}`}>\r\n                 </Card>\r\n                   )}\r\n                    <Form onSubmit = {this.handleSubmit}>\r\n                      <Form.Item >\r\n                        {getFieldDecorator('buttons', {})(\r\n                          <Radio.Group onChange = {this.onChange} value = {this.state.value} >\r\n                            {answers.map(item=>\r\n                              <Radio style={radioStyle} value={item.key}> {\"Answer \" + item.key} </Radio>\r\n                            )}\r\n                          </Radio.Group>\r\n                          )}\r\n                      </Form.Item>\r\n                      <Paragraph>\r\n                        <ul>\r\n                          {votes.map(item =>\r\n                            <li>\r\n                              {item.key + \" - \" + item.votes + \" votes\"}\r\n                            </li>                            \r\n                          )}\r\n                        </ul>\r\n                        {canConductMAJ ? (\r\n                          \"Simple Majority Aggregation indicates that answer \" + correctAnswer[0].key + \" is most likely to be correct.\"\r\n                        ) : (\r\n                          <>\r\n                            <p>This task has not yet been evaluated by a user. In order to conduct Simple Majority Aggregation, a minimum of one response is required.</p>\r\n                            <p>The reliability of this method increases with the number of responses received.</p>\r\n                          </>\r\n                        )}\r\n                      </Paragraph>\r\n                      <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                            Submit\r\n                        </Button>\r\n                      </Form.Item>\r\n                    </Form>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nviewTaskApp = Form.create()(viewTaskApp);\r\n\r\nexport default withRouter(viewTaskApp)","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Form, Tabs } from 'antd';\r\nimport CreateTask from './create-task.js';\r\nimport ListPage from './QuestionListPage.js';\r\nimport './login.css';\r\n\r\nfunction checkAdmin(userType) {\r\n    if (userType === \"Admin\") {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass Admin extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            signedOut: false\r\n        };\r\n    }\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n\r\n                var task_data = values;\r\n\r\n                var request = new Request('/adminPage', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(task_data)\r\n                });\r\n\r\n                fetch(request)\r\n                .then(function() {\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    handleSignOut = e => {\r\n        var request = new Request('/signOut', {\r\n            method: 'GET',\r\n        });\r\n\r\n        const that = this;\r\n\r\n        fetch(request)\r\n        .then(function(response) {\r\n            if (!response.ok) {\r\n                throw Error(response.statusText);\r\n            }\r\n            return response;\r\n        }).then(function(response) {\r\n            console.log('ok');\r\n            that.setState({\r\n                signedOut: true\r\n            });\r\n        }).catch(function(error) {\r\n            that.setState({\r\n                signedOut: false\r\n            });\r\n            console.log(error);\r\n        });\r\n    };\r\n\r\n    render() {\r\n        var userObject = JSON.parse(window[\"user\"].replace(/&#34;/g,'\"'));\r\n        var isAdmin = checkAdmin(userObject.type);\r\n        var tabs;\r\n\r\n        if (this.state.signedOut) {\r\n            return <Redirect to='/' />\r\n        }\r\n\r\n        if (isAdmin) {\r\n            tabs = [\r\n                <Tabs animated={true} style={{textAlign: 'center'}}>\r\n                    <TabPane tab=\"Task List\" key=\"1\" style={{textAlign: 'left'}}>\r\n                        <ListPage />\r\n                    </TabPane>\r\n                    <TabPane tab=\"Create Task\" key=\"3\" style={{textAlign: 'left'}}>\r\n                        <CreateTask />\r\n                    </TabPane>\r\n                 </Tabs>\r\n            ];\r\n        } else {\r\n            tabs = [\r\n                <Tabs animated={true} style={{textAlign: 'center'}}>\r\n                    <TabPane tab=\"Task List\" key=\"1\" style={{textAlign: 'left'}}>\r\n                        <ListPage />\r\n                    </TabPane>\r\n                </Tabs>\r\n            ];\r\n        }\r\n\r\n        return (\r\n            <div style={{ width:'80%',margin:'3% auto 0' }}>\r\n                <div style={{overflow:'hidden', textAlign:'right'}}>\r\n                  <a href='/' onClick = {this.handleSignOut}>Sign out</a>\r\n                </div>\r\n                {tabs}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nAdmin = Form.create()(Admin);\r\n\r\nexport default Admin;\r\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport HomePage from './App.js';\r\nimport LoginForm from './login.js';\r\nimport RegisterForm from './register.js';\r\nimport Admin from './adminPage.js';\r\nimport ListPage from './QuestionListPage.js';\r\nimport viewTaskApp from './QuestionDetails.js';\r\n\r\nexport default class AppRouter extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<BrowserRouter>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route exact path=\"/\" component={HomePage}></Route>\r\n\t\t\t\t\t<Route path=\"/login\" component={LoginForm}></Route>\r\n\t\t\t\t\t<Route path=\"/register\" component={RegisterForm}></Route>\r\n\t\t\t\t\t<Route path=\"/adminPage\" component={Admin}></Route>\r\n\t\t\t\t\t<Route path=\"/questionList\" component={ListPage}></Route>\r\n\t\t\t\t\t<Route path=\"/questionDetails\" component={viewTaskApp}></Route>\r\n\t\t\t\t</Switch>\r\n\t\t\t</BrowserRouter>\r\n\t\t)\r\n\t}\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './login.css';\nimport * as serviceWorker from './serviceWorker';\nimport AppRouter from './router.js';\n\nReactDOM.render(<AppRouter/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}